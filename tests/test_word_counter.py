"""
Test to check the word-counter functionality.

Step-1 Open rewritertools.com
Step-2 Locate Word-counter.
Step-3 Check if you have navigated to correct webpage.
Step-4 Navigate to the input box.
Step-5 Input a sample text.
Step-6 click on "count words" button.
Step-7 get the results of the word count(Total Words and Total Characters).
Step-8 Compare it with expexcted total word count and total character.

"""

import os,sys,time
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from page_objects.PageFactory import PageFactory
from utils.Option_Parser import Option_Parser
import pytest
import conf.rewritertool_conf as conf
from utils.Wrapit import Wrapit

@pytest.mark.GUI

def test_word_counter(test_obj):
    "Run the test"
    try:
        #Initalize flags for tests summary
        expected_pass = 0
        actual_pass = -1
        
        #Set start_time with current time
        start_time = int(time.time())

        #1.) Open rewritertools.com
        
        test_obj = PageFactory.get_page_object("home")
    

        #2. Locate Word-counter.
        result_flag = test_obj.word_count_click()
        test_obj.log_result(result_flag,
        positive="Automation is now on the word_count page",
        negative="Automation is not on the word_count page",
        level="critical") 

        #3. Verify the word count webpage if landed correctly or not
        result_flag = test_obj.verify_frame()
        test_obj.log_result(result_flag,
        positive="Automation is now on the word_count page and verified",
        negative="Automation is not on the word_count page could not be verified!!!",
        level="critical") 

        #4&5. Navigate to the input box.
        result_flag = test_obj.input_sample_text(conf.word_count_sample)
        test_obj.log_result(result_flag,
        positive="Entered the sample",
        negative="Couldn't Enter the sample",
        level="critical")

        #6. Click on "word count" button.
        result_flag = test_obj.word_count_button_click()
        test_obj.log_result(result_flag,
        positive="Automation has clicked the button",
        negative="Automation could not click the button",
        level="critical") 

        #7 Get the results of the word count(Total Words and Total Characters).
        result_flag=test_obj.get_result()
        test_obj.log_result(result_flag,
        positive="the results have been generated by the webpage",
        negative="Webpage could not generate the result.",
        level="critical")


        
    except Exception as e:
        print("Exception when trying to run test: %s"%__file__)
        print("Python says:%s"%str(e))
    
    assert expected_pass == actual_pass, "Test failed: %s"%__file__

#---START OF SCRIPT   
if __name__=='__main__':
    print("Start of %s"%__file__)
    #Creating an instance of the class
    options_obj = Option_Parser()
    options = options_obj.get_options()
                
    #Run the test only if the options provided are valid
    if options_obj.check_options(options): 
        test_obj = PageFactory.get_page_object("Zero",base_url=options.url)

        #Setup and register a driver
        test_obj.register_driver(options.remote_flag,options.os_name,options.os_version,options.browser,options.browser_version,options.remote_project_name,options.remote_build_name)

        test_word_counter(test_obj)
                
        #teardowm
        test_obj.wait(3)
        test_obj.teardown() 
    else:
        print('ERROR: Received incorrect comand line input arguments')
        print(option_obj.print_usage())